When would you want to use a remote repository rather than keeping all your work
local?
If you want to collaborate on a project, it's best to have a remote repository
so everyone can see what each other are doing. Having separate local files
won't be as efficient as all working on the same file and periodically pushing
new commits to the repo.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

  Pulling changes manually is better because if someone added something that
  was either fatal or unfinished, it would have messed with your own local
  file that you had. having manual ones helps you choose what exactly you want
  in your local repo.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are direct clones of other repositories stored in GitHub. Clones
    are copies of repos from GitHub to the local device. Branches are
    where different commits diverge in order to create many variations of the
    master branch. You would use forks when creating a copy of a repo while also
    keeping one onto Github so you could collaborate. Clones are useful when
    just working independently and wanting to keep all of your own commits.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a copy of the last known state gives you the previous data of what
    was in there before you made changes to it locally. It gives a last known
    online version of it so that you can go back just in case something
    goes wrong.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    It would be harder, but it would have to be in person. Pair programming
    would be a great way to collaborate since 2 people are working on the same
    code. It isn't tedious or counter intuitive since only one person is
    actually programming while the other is spotting and can see immediately
    if there is an error. It would be easier in the sense to collaborate
    together, since they are working on one thing. In Git it's a bit harder
    since code needs to be constantly merged together which takes negotiation.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
